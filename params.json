{"name":"Ui-bibz","tagline":"Ui Frameworks based on Bootstrap","body":"![Ui Bibz logo](https://github.com/thooams/Ui-Bibz/raw/master/doc/images/ui-bibz-logo-without-border.gif)\r\n\r\n[![Build Status](https://travis-ci.org/thooams/Ui-Bibz.svg)](https://travis-ci.org/thooams/Ui-Bibz)\r\n[![Code Climate](https://codeclimate.com/github/thooams/Ui-Bibz/badges/gpa.svg)](https://codeclimate.com/github/thooams/Ui-Bibz)\r\n[![Test Coverage](https://codeclimate.com/github/thooams/Ui-Bibz/badges/coverage.svg)](https://codeclimate.com/github/thooams/Ui-Bibz)\r\n\r\nThis project rocks and uses MIT-LICENSE.\r\n\r\n# Ui Bibz\r\n> Ui Bibz est un [framework d'interface](http://fr.wikipedia.org/wiki/Framework_d%27interface)\r\n> permettant de construire une interface très rapidement et simplement\r\n> à l'aide de Ruby on Rails 4 et de Boostrap 3.\r\n\r\nUi Bibz charge la librairie [boostrap](http://getbootstrap.com/) et\r\n[awesomefont](http://fontawesome.io/) en [CDN](https://fr.wikipedia.org/wiki/Content_delivery_network).\r\n\r\n**NB** : [HAML](http://haml.info/) est utilisé pour présenter les exemples de chaque élément.\r\nVous pouvez bien entendu utiliser l'interpréteur [ERB](https://en.wikipedia.org/wiki/ERuby) dans votre application Rails.\r\n\r\nTous les composants du framework Ui Bibz comportent l'agument *options* et l'argument *html_options*.\r\nCes éléments sont basés sur l'élément ```Component```.\r\nUn ```component``` accepte un contenu par variable ou par block.\r\n\r\n### Component\r\n\r\n\r\nL'élément ```component``` accepte dans content et block :\r\n\r\n* le contenu\r\n\r\nL'élément ```component``` à pour ```options``` un Hash acceptant les clefs :\r\n\r\n* [state](#state-values)\r\n* [glyph](#glyph-arguments)\r\n* [status](#status-values)\r\n* class\r\n\r\n\r\nL'élément ```component``` à pour ```html_options``` un Hash acceptant les clefs :\r\n\r\n* class\r\n* data\r\n* ...\r\n\r\nExemple :\r\n\r\n```ruby\r\nComponent.new 'Exemple', { state: :success, glyph: { name: 'pencil', size: 3} }, { class: 'exemple' }\r\n# ou\r\nComponent.new { state: :success, glyph: 'eye' }, { class: 'exemple' } do\r\n  'Exemple'\r\nend\r\n```\r\n\r\nSignature :\r\n\r\n```ruby\r\nComponent.new content = nil, options = nil, html_options = nil, &block\r\n```\r\n\r\n**NB** : Pour des raisons de simplicité d'écriture, l'argument ```class``` est présent\r\ndans ```options``` et ```html_options```.\r\n\r\n\r\n## Installation\r\n\r\nAjouter la gem dans Rails :\r\n\r\n```ruby\r\ngem \"ui_bibz\", '~> 1.0.0'\r\n```\r\n\r\nLancer la command suivante :\r\n\r\n```console\r\nbundle install\r\n```\r\n\r\nPlacer la ligne suivante dans ```/app/views/layouts/application.rb```\r\n```ruby\r\n = ui_bibz_meta_links\r\n```\r\n\r\nExemple :\r\n```ruby\r\n!!!\r\n%html\r\n  %head\r\n    ...\r\n    = ui_bibz_meta_links\r\n    ...\r\n  %body\r\n```\r\n\r\nPlacer la ligne suivante dans ```/app/assets/stylesheets/applications.css```\r\n```ruby\r\n...\r\n*= require ui_bibz\r\n...\r\n```\r\n\r\nPlacer la ligne suivante dans ```/app/assets/javascripts/applications.js```\r\n```ruby\r\n...\r\n//= require ui_bibz\r\n...\r\n```\r\n\r\n\r\n## Utilisation\r\n\r\n### Alert\r\n\r\n![alert](https://github.com/thooams/Ui-Bibz/raw/master/doc/images/alert.png)\r\n\r\nL'élément ```notify``` à pour ```options``` un Hash acceptant les clefs :\r\n\r\n* [state](#state-values)\r\n* [glyph](#glyph-arguments)\r\n\r\n```ruby\r\n= notify 'toto', state: :info, glyph: 'eye'\r\n```\r\n\r\n### Breadcrumb (fil d'ariane)\r\n\r\n![breadcrumb](https://github.com/thooams/Ui-Bibz/raw/master/doc/images/breadcrumb.png)\r\n\r\nL'élément ```breadcrumb``` à pour ```options``` un Hash acceptant les clefs :\r\n\r\n* [status](#status-values)\r\n* [glyph](#glyph-arguments)\r\n* url\r\n\r\nL'élément ```link``` est un [component](#component).\r\n\r\n```ruby\r\n= breadcrumb do |b|\r\n  - b.link 'toto', url: '#toto', glyph: 'home'\r\n  - b.link 'momo', url: '#momo'\r\n  - b.link 'nono', status: :active\r\n```\r\n\r\n### Buttons (Boutons)\r\n\r\n#### Button\r\n\r\n![button](https://github.com/thooams/Ui-Bibz/raw/master/doc/images/button.png)\r\n\r\nL'élément ```button``` à pour ```options``` un Hash acceptant les clefs :\r\n\r\n* [state](#state-values)\r\n* [status](#status-values)\r\n* [glyph](#glyph-arguments)\r\n* [size](#size-values)\r\n\r\n```ruby\r\n= button 'Button', { state: :danger, size: :xs, glyph: 'star' } , { class: 'my-button' }\r\n```\r\n\r\n#### Button Dropdown\r\n\r\nL'élément ```button_dropdown``` accepte pour options les mêmes clefs que l'élément\r\n[dropdown](#dropdown).\r\n\r\n![button_link](https://github.com/thooams/Ui-Bibz/raw/master/doc/images/button_dropdown.png)\r\n```ruby\r\n= button_dropdown 'Button Dropdown' do |bd|\r\n  - bd.list link_to 'toto', '#'\r\n  - bd.list 'header', type: :header\r\n  - bd.list link_to 'momo', '#'\r\n  - bd.list '---'\r\n  - bd.list link_to 'lolo', '#'\r\n```\r\n\r\n#### Button group\r\n\r\n![button_group](https://github.com/thooams/Ui-Bibz/raw/master/doc/images/button_group.png)\r\n\r\nL'élément ```button_group``` à pour ```options``` un Hash acceptant les clefs :\r\n\r\n* position (:vertical, :horizontal)\r\n* [size](#size-values)\r\n\r\nL'élément ```list``` à pour ```options``` un Hash acceptant les clefs :\r\n\r\n* [status](#status-values)\r\n* [state](#state-values)\r\n\r\n```ruby\r\n= button_group position: :vertical, size: :xs do\r\n  = button 'toto', status: :active\r\n  = button 'momo'\r\n  = button 'lolo'\r\n\r\n= button_group do\r\n  = button 'toto', status: :active\r\n  = button 'momo'\r\n  = button 'lolo'\r\n  = button_dropdown 'Button Dropdown' do |bd|\r\n    - bd.list 'header', type: :header\r\n    - bd.list link_to 'momo', '#'\r\n    - bd.list '---'\r\n    - bd.list link_to 'lolo', '#'\r\n```\r\n\r\n#### Button Link (Lien Bouton)\r\n\r\n![button_link](https://github.com/thooams/Ui-Bibz/raw/master/doc/images/button_link.png)\r\n\r\nL'élément ```button_link``` à pour ```options``` un Hash acceptant les clefs :\r\n\r\n```ruby\r\n= button_link 'Button', { url: '#button', state: :primary, glyph: 'star' }, { class: 'my-button' }\r\n```\r\n\r\n#### Button Split Dropdown\r\n\r\n![button_group](https://github.com/thooams/Ui-Bibz/raw/master/doc/images/button_split_dropdown.png)\r\n\r\nL'élément ```button_split_dropdown```accepte pour options les mêmes clefs\r\nque l'élément [dropdown](#dropdown).\r\n\r\n```ruby\r\n= button_split_dropdown 'Dropdown', state: :primary do |d|\r\n  - d.list do\r\n    = link_to 'toto', \"#\"\r\n  - d.list 'header', type: :header\r\n  - d.list link_to 'momo', '#'\r\n  - d.list '---'\r\n  - d.list link_to 'lolo', '#'\r\n```\r\n\r\n### Dropdown\r\n\r\nL'élément ```dropdown``` à pour ```options``` un Hash acceptant les clefs :\r\n\r\n* [state](#state-values)\r\n* [status](#status-values)\r\n* position (:left, :right)\r\n\r\nL'élément ```list``` est un [component](#component) qui accepte pour options les clefs :\r\n\r\n* type (:header)\r\n* [glyph](#glyph-arguments)\r\n\r\n```ruby\r\n= dropdown 'Dropdown', state: :success do |d|\r\n  - d.list do\r\n    = link_to 'toto', \"#\"\r\n  - d.list 'header', type: :header\r\n  - d.list link_to 'momo', '#'\r\n  - d.list '---'\r\n  - d.list link_to 'lolo', '#'\r\n```\r\n\r\nPour ajouter une ligne séparatrice, il suffit d'insérer 3 \"-\" à la suite\r\n\r\nExemple :\r\n\r\n```\r\n...\r\nd.list '--'\r\n...\r\n```\r\n\r\n### Progress Bar\r\n\r\n![glyph](https://github.com/thooams/Ui-Bibz/raw/master/doc/images/progress_bar.png)\r\n\r\nL'élément ```progress_bar``` à pour ```options``` un Hash acceptant les clefs :\r\n\r\n* [state](#state-values)\r\n* type (:animated, :striped)\r\n* label - String (default: \"percentage%\")\r\n* tap - Boolean (true: To add several bars)\r\n* percentage_min - Integer (default: 0)\r\n* percentage_max - Integer (default: 100)\r\n* sr_only - Boolean to show label (default: false)\r\n\r\n```ruby\r\n= progress_bar 30\r\n# or\r\n= progress_bar state: :info, sr_only: true, type: :animated do\r\n  = 70\r\n# or\r\n= progress_bar(tap: true) do |pb|\r\n  - pb.bar 10, { state: :success, label: 'Loading...' },{ class: 'test' }\r\n  - pb.bar 30, state: :warning\r\n  - pb.bar(type: :striped) do\r\n    = 10\r\n```\r\n\r\n### Glyph\r\n\r\n![glyph](https://github.com/thooams/Ui-Bibz/raw/master/doc/images/glyph.png)\r\n\r\nLes glyphs utilisés proviennent de [Font Awesome](http://fontawesome.io/).\r\nL'élément ```glyph``` peut contenir un hash pour ```content```\r\nL'élément ```glyph``` à pour ```options``` un Hash acceptant les clefs :\r\n\r\n* size\r\n* type\r\n\r\n```ruby\r\n= glyph 'star', { size: 3, type: 'fw' }, class: 'star-exemple'\r\nou\r\n= glyph { name: 'star', size: 3, type: 'fw' }\r\n```\r\n\r\n### Panel\r\n\r\n![panel](https://github.com/thooams/Ui-Bibz/raw/master/doc/images/panel.png)\r\n\r\nL'élément ```panel``` à pour ```options``` un Hash acceptant les clefs :\r\n\r\n* [state](#state)\r\n* tap (true) : permet de créer un header, body et footer\r\n\r\nLes éléments ```header```, ```body```,```footer``` sont des éléments [component](#component).\r\n\r\nExemple :\r\n\r\n```ruby\r\n= panel 'danger'\r\n# ou\r\n= panel state: :danger do\r\n  = 'toto'\r\n# ou\r\n= panel({ tap: true, state: :danger }, { class: 'exemple' }) |p|\r\n  - p.header 'toto', glyph: 'eye'\r\n  - p.body class: 'my-body' do\r\n    = 'toto'\r\n  - p.footer 'toto'\r\n```\r\n\r\n### Table\r\n\r\n![table](https://github.com/thooams/Ui-Bibz/raw/master/doc/images/table.png)\r\n\r\nL'élément ```table``` est un tableau composé d'une recherche, une pagination et un trie de colonnes intégrées.\r\nLe tableau est compatible [I18n](http://guides.rubyonrails.org/i18n.html).\r\nLe tableau contient pour chaque ligne un bouton dropdown 'action' avec par défaut\r\nces 3 actions : voir, éditer, supprimer. Toutes les colonnes sont présentes et\r\naffichées par défaut.\r\n\r\nLa table doit contenir un store. Ce store doit-être créé dans le controlleur avec la\r\nméthode ```table_search_pagination```.\r\n\r\nLa méthode ```table_search_pagination``` contient 3 arguments :\r\n\r\n* params\r\n* session\r\n* args (optionel)\r\n\r\nExemple :\r\n\r\n```ruby\r\n# app/controllers/document_controller.rb\r\n@documents = Document.table_search_pagination(params, session)\r\n```\r\n\r\nDans le model, insérer la méthode ```searchable_attributes``` afin de pouvoir\r\nfaire une recherche sur les attributs souhaités.\r\n\r\nExemple :\r\n\r\n```ruby\r\n# app/models/document.rb\r\nsearchable_attributes :name_fr, :name_en\r\n```\r\n\r\nUn champ recherche est disponible dans la vue :\r\n\r\n![table_search_field](https://github.com/thooams/Ui-Bibz/raw/master/doc/images/table_search_field.png)\r\n\r\n```ruby\r\n= table_search_field store: @documents\r\n```\r\n\r\nUne pagination est disponible dans la vue :\r\n\r\n```ruby\r\n= table_pagination store: @documents\r\n```\r\n\r\nUn champs select par page est disponible dans la vue :\r\n\r\n![table_search_field](https://github.com/thooams/Ui-Bibz/raw/master/doc/images/table_pagination_per_page.png)\r\n\r\n```ruby\r\n= table_pagination_per_page store: @documents\r\n```\r\n\r\n#### Simple Example table\r\n\r\nDans le **controlleur**, insérer la méthode ```table_search_pagination```.\r\nLa méthode ```table_search_pagination``` contient 3 arguments :\r\n\r\n* params\r\n* session\r\n* args\r\n\r\nExemple :\r\n\r\n```ruby\r\n# app/controllers/document_controller.rb\r\n@documents = Document.table_search_pagination(params, session)\r\n```\r\n\r\nDans le **model**, insérer la méthode ```searchable_attributes``` afin de pouvoir\r\nfaire une recherche sur les attributs souhaités.\r\n\r\nExemple :\r\n```ruby\r\n# app/models/document.rb\r\nsearchable_attributes :name_fr, :name_en\r\n```\r\n\r\nDans la **vue**, insérer la méthode ```table``` qui peut contenir plusieurs arguments :\r\n\r\n* store (ex: @documents)\r\n* paginable (true, false)\r\n* sortable (true, false)\r\n\r\nUne table comporte des **colonnes** et des **actions**.\r\n\r\nExemple :\r\n```ruby\r\n# app/views/documents/index.html.haml\r\n= table store: @documents\r\n```\r\n\r\nLes actions par défauts peuvent être modifiées ([voir exemple complexe](#Complex-Example-table)) :\r\n\r\n* edit\r\n* view\r\n* delete\r\n\r\nElles sont intégrées à l'intérieur d'un bouton [dropdown](#dropdown).\r\n\r\nExemple :\r\n```ruby\r\n# app/views/documents/index.html.haml\r\n= table store: @documents do |g|\r\n  - g.actions do\r\n    = link_action 'Show', documents_path(:id), glyph: 'eye'\r\n    = link_action 'Edit', edit_document_path(:id), glyph: 'pencil'\r\n    = link_action 'Delete', documents_path(:id), method: :delete, glyph: 'trash', data: { confirm: 'Are you sure?' }\r\n    = link_action \"---\"\r\n    = link_action 'Duplicate', duplicate_document_path(:id), glyph: 'files-o'\r\n    = link_action 'Alert', alert_document_path(:id), glyph: 'bell'\r\n```\r\n\r\nL'ajout de colonnes à travers la méthode ```add``` contient plusieurs arguments :\r\n\r\n* name (nom de la colonne)\r\n* data_index (le nom de l'attribut)\r\n* count (utilise la méthode count sur l'élément)\r\n* date_format (formate l'affichage de la date en utilisant la méthode ```strftime``` ex: '%Y/%M/%D')\r\n* format (formate les élements de la colone en utilisant **lambda**)\r\n* link (ajoute un lien où l'expression ```:id``` est parsé et remplacé par l'entier correspondant)\r\n* sort (permet de trier sur des champs )\r\n* custom_sort (indique que le tableau sera triéé d'une manière personnalisée)\r\n\r\n```ruby\r\n# app/views/documents/index.html.haml\r\n= table store: @documents do |g|\r\n  - g.columns do |c|\r\n    - c.add { name: '#', data_index: 'id' }\r\n    - c.add { name: 'Name fr', data_index: 'name_fr', link: edit_document_path(:id)}\r\n    - c.add { data_index: 'name_en' }\r\n    - c.add { name: 'Hotline', data_index: 'hotline_access', format: lambda{ |records, record| glyph(record.icon) }}\r\n    - c.add { name: 'Updated at', data_index: 'updated_at', date_format: '%Y' }\r\n```\r\n\r\n#### Complex Example table\r\n\r\nSi on souhaite voir apparaître certaines liasions avec d'autres tables il faut pour\r\ncela :\r\n\r\nDans le controlleur, insérer la méthode ```table_search_pagination``` en ajoutant\r\nun ```includes``` juste avant.\r\n\r\nExemple :\r\n```ruby\r\n# app/controllers/document_controller.rb\r\n@documents = Document.includes(:users).table_search_pagination(params, session)\r\n```\r\n\r\nDans la vue, insérer la méthod ```table```.\r\nNB: On peut créer ces propres méthodes comme ```user_name``` dans notre model \"Document\" et\r\nl'appeler comme valeur pour la clef ```data_index```.\r\n\r\n```ruby\r\n# app/views/documents/index.html.haml\r\n= table store: @documents do |g|\r\n  - g.columns do |c|\r\n    - c.add { name: 'Users', data_index: 'user_name', sort: \"user.name\" }\r\n```\r\n\r\n\r\n#### Ultra Complex Example table\r\n\r\nSi l'on souhaite, par exemple, dénombrer des utilisateurs qui ont un lien non\r\ndirect avec les documents.\r\nImaginons par exemple qu'un utilisateur à des produits et que\r\nces produits contiennent plusieurs documents. On souhaite compter le nombre\r\nd'utilisateurs par document.\r\n\r\nOn peut ajouter des arguments dans la méthode ```table_search_pagination```\r\nqui vont permettre de faire des jointures.\r\n\r\nExemple :\r\n```ruby\r\n# app/controllers/document_controller.rb\r\narguments  = { sortable: {\r\n  column: 'users',\r\n  count:  true,\r\n  joins: \"LEFT OUTER JOIN documents_products ON documents_products.document_id = documents.id\r\n          LEFT OUTER JOIN products ON products.id = documents_products.product_id\r\n          LEFT OUTER JOIN products_users ON products_users.product_id = products.id\r\n          LEFT OUTER JOIN users ON users.id = products_users.user_id\"\r\n} }\r\n\r\n@documents = Document.includes(:users).table_search_pagination(params, session, arguments)\r\n```\r\n\r\nIci l'argument sortable signifie que l'on souhaite s'interresser à la\r\nfonctionnalité de trie.\r\n\r\nPour celà il faut :\r\n\r\n* définir le nom de la colonne triéé à travers l'argument ```column:``` (string)\r\n* définir si le traitement se fait sur le comptage avec l'argument ```count:```\r\n  (boolean)\r\n* définir la jointure avec l'argument ```joins:``` (string, array, hash)\r\n\r\nDans la vue :\r\n\r\n```ruby\r\n# app/views/documents/index.html.haml\r\n= table store: @documents do |g|\r\n  - g.columns do |c|\r\n    - c.add({ name: 'Users', data_index: 'users', count: true, custom_sort: true })\r\n```\r\n\r\n#### table I18n\r\n\r\nLa table est utilisable avec I18n. Les traductions\r\ns'executent par ordre d'importance dans cet ordre précis pour la colonne \"name_fr\" par exemple.\r\n\r\n1. ui_biz.table.headers.document.name_fr\r\n2. ui_biz.table.headers.defaults.name_fr\r\n3. activerecord.attributes.document.name_fr\r\n4. activerecord.attributes.defaults.name_fr\r\n\r\nLe placeholder du champ recherche est utilisable et traduisible avec les attributs activerecord dans le fichier locale.\r\n\r\nExemple :\r\n\r\n```ruby\r\n# config/locales/fr.yml\r\n...\r\nactiverecord:\r\n  models:\r\n      user: 'Utilisateur'\r\n  attributes:\r\n    defaults:\r\n      name_fr: 'Nom fr'\r\n...\r\n```\r\n\r\n### Table Panel\r\n\r\n![table_panel](https://github.com/thooams/Ui-Bibz/raw/master/doc/images/table_panel.png)\r\n\r\nLe composant ```table_panel``` est un [tableau](#table) dans un [panel](#panel).\r\n\r\n```ruby\r\n= table_panel store: @users\r\n#ou\r\n= table_panel({ store: @users, tap: true, glyph: 'home', state: :danger }) do |g|\r\n  - g.columns do |cls|\r\n    - cls.column name: '#', data_index: 'id'\r\n    - cls.column name: 'Username', data_index: 'username', link: edit_user_path(:id)\r\n    - cls.column name: 'Name', data_index: 'name'\r\n    - cls.column name: 'Email', data_index: 'email'\r\n    - cls.column name: 'Role', data_index: 'role_name', sort: 'roles.name'\r\n  - g.actions do |acs|\r\n    - acs.action 'Toto', url: edit_user_path(:id), glyph: 'pencil'\r\n    - acs.action \"---\"\r\n    - acs.action 'momo', url: user_path(:id), glyph: 'eye'\r\n\r\n```\r\n\r\n### List\r\n\r\n![list](https://github.com/thooams/Ui-Bibz/raw/master/doc/images/list.png)\r\n\r\nPar défaut une liste à pour tag ```<li>```.\r\nMais elle peut se transformer en lien ```<a>``` à travers l'option ```type:```.\r\nPar défaut le tag ```<li>``` est présent.\r\n\r\n```ruby\r\n= list_group type: :link do |lg|\r\n  - lg.list 'Momo', { state: :success, glyph: 'home' }, { href: '#Momo' }\r\n  - lg.list({ tap: true, status: :active }, { href: '#Toto' }) do |l|\r\n    - l.header 'My title'\r\n    - l.body 'My title'\r\n# ou\r\n= list_group do |lg|\r\n  - lg.list 'Momo', glyph: 'home', badge: 2\r\n  - lg.list 'Toto'\r\n```\r\n\r\n### Nav\r\n\r\n![nav](https://github.com/thooams/Ui-Bibz/raw/master/doc/images/nav.png)\r\n\r\nPar défaut la navigation comporte des onglets \"tab\".\r\nL'élément ```nav``` accepte en option les arguments :\r\n\r\n* type (:pills, :tabs)\r\n* position (:justified, :stacked)\r\n* tap (true)\r\n\r\nL'élement link est un [component](#component).\r\n\r\n```ruby\r\n= nav(type: :pills, position: :justified, tap: true) do |d|\r\n  d.link 'Test', url: '#test', badge: 6\r\n  d.link 'Test2', url: '#test2', status: :active\r\n```\r\n\r\n### Etiquette\r\n\r\n![list](https://github.com/thooams/Ui-Bibz/raw/master/doc/images/etiquette.png)\r\n\r\n\r\nNB : Les méthodes ```Tag, label``` sont déjà utilisées par Rails.\r\nL'élément ```etiquette``` à pour ```options``` un Hash acceptant les clefs :\r\n\r\n* [state](#state-values)\r\n* [glyph](#glyph-values)\r\n\r\nExemple :\r\n\r\n```ruby\r\n= etiquette 'label'\r\n= etiquette 'label 2', state: :success\r\n= etiquette 'label 2', state: :danger\r\n```\r\n\r\n### Row\r\n\r\nLe composant row génére une div avec la class row.\r\n\r\n ```ruby\r\n= row class: 'toto' do\r\n  = content\r\n# => <div class='row toto'>content</div>\r\n```\r\n\r\n### Col\r\n\r\nL'élément ```col``` est un [composant](#composant) qui accèpte en arguments :\r\n\r\n* num\r\n* offset\r\n* size\r\n\r\nou\r\n\r\n* un tableau de hashes avec les arguments ```num```, ```offset``` et ```size``` à l'intérieur.\r\n\r\nCes paramètres génèrent les classes qui seront insérées dans la div avec la classe\r\ncol.\r\n\r\n\r\n```ruby\r\n= col({num: 2, size: :lg}, class: 'test') do\r\n  = content\r\n\r\n# => <div class='col-lg-2 test'>content</div>\r\n\r\n# ou\r\n= col([{ offset: 1, size: :xs}, { num: 3}], class: 'test') do\r\n  = content\r\n\r\n# => <div class='col-xs-offset-1 col-md-3 test'>content</div>\r\n```\r\n\r\n### Grid\r\n\r\nUne grid est un composant qui est composé de 5 vues :\r\n\r\n* top\r\n* right\r\n* bottom\r\n* left\r\n* center\r\n\r\nLa vue **center** est obligatoire.\r\nUne vue à pour arguments :\r\n\r\n* position (:top, :left, :bottom, :right, :center)\r\n* num (1..12) 12 étant le nombre limite de colonnes utilisable dans boostrap.\r\n\r\nL'argument ```position``` détermine la position de la vue et l'argument ```num``` determine\r\nle nombre de colonnes occupées par la vue.\r\n\r\n```ruby\r\n= grid do |g|\r\n  - g.view num: 3, position: :left do\r\n    = list_group(type: :link) do |lg|\r\n      - lg.list 'Link 1', { url: '#link1' }\r\n      - lg.list 'Link 2', { url: '#link1', status: :active }\r\n      - lg.list 'Link 1', { url: '#link1' }\r\n      - lg.list 'Link 3', { url: '#link1' }\r\n      - lg.list 'Link 4', { url: '#link1' }\r\n  - g.view({ position: :top}) do\r\n    = button_group(type: :toolbar) do\r\n      = button 'option 1'\r\n      = button 'option 2'\r\n      = button 'option 3'\r\n  - g.view position: :center do\r\n    = table store: @users, type: :bordered\r\n  - g.view position: :bottom do\r\n    = 'bottom'\r\n\r\n= grid do |g|\r\n  - g.view num: 5, position: :left do\r\n    = 'left'\r\n  - g.view position: :right do\r\n    = 'right'\r\n  - g.view({ position: :top}, { class: 'success'}) do\r\n    = 'top'\r\n  - g.view position: :center do\r\n    = 'center'\r\n  - g.view position: :bottom do\r\n    = 'bottom'\r\n```\r\n\r\n### Arguments and Values\r\n\r\n#### Status values\r\n* :active\r\n* :disable\r\n\r\n#### Size values\r\n* :xs\r\n* :sm\r\n* :lg\r\n\r\n#### State values\r\n* :default\r\n* :primary\r\n* :info\r\n* :success\r\n* :warning\r\n* :danger\r\n\r\n#### Glyph arguments\r\n* name\r\n* size\r\n* type\r\n\r\n# Plus de détails\r\n\r\nPour plus d'informations, vous pouvez accéder à la documentation rdoc en\r\ngénérant cette dernière :\r\n\r\n```\r\nrake rdoc\r\n```\r\n\r\n# Conflits\r\n\r\nCertaines méthodes dans le helper peuvent être en conflit avec d'autres\r\nlibrairies. Le cas échéant, vous pouvez utiliser directement la librairie UiBibz\r\ncomme ci-dessous.\r\n\r\nExemple :\r\n\r\n```ruby\r\nUiBibz::Ui::Panel.new('Exemple', { state: :success }, { class: 'exemple'}).render\r\n# au lieu de\r\npanel 'Exemple', { state: :success }, { class: 'exemple' }\r\n```\r\n\r\n# Roadmap :\r\n\r\nPour la V2.\r\n\r\n* créer des stores pour les listes, breadcrumb\r\n* créer une meilleure documentation\r\n* créer d'autres extensions, plugins et une guideline\r\n* donner le choix de la dépendence boostrap et awesomefont en CDN ou en local\r\n* mise à jour vers bootstrap 4\r\n* créer Ui-Bibz Core à partir de cette librairie ( pour l'insérer dans un nouveau\r\n  framework Ui-Bibz utilisant simple_form pour les champs formulaires ).\r\n...","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}